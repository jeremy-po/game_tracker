{
  "version": 3,
  "sources": ["../../node-fetch/browser.js", "../../fortnite-api-io/lib/util.js", "../../fortnite-api-io/lib/base-client.js", "../../fortnite-api-io/lib/endpoints-v2.js", "../../fortnite-api-io/lib/fortnite-api-v2.js", "../../fortnite-api-io/lib/endpoints.js", "../../fortnite-api-io/lib/fortnite-api.js", "../../fortnite-api-io/index.js"],
  "sourcesContent": ["\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar globalObject = getGlobal();\n\nmodule.exports = exports = globalObject.fetch;\n\n// Needed for TypeScript and Webpack.\nif (globalObject.fetch) {\n\texports.default = globalObject.fetch.bind(globalObject);\n}\n\nexports.Headers = globalObject.Headers;\nexports.Request = globalObject.Request;\nexports.Response = globalObject.Response;\n", "/**\r\n * fortnite-api-io\r\n * Module to make API calls to fortniteapi.io\r\n *\r\n * @author Ben Hawley\r\n * @license MIT\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * util.js\r\n * General utility functions\r\n */\r\n\r\n/**\r\n * supportsLanguage()\r\n * Checks if supplied language is supported by the API\r\n *\r\n * @param {string} lang\r\n * @returns {boolean}\r\n */\r\nfunction supportsLanguage(lang) {\r\n    const supportedLanguages = [\r\n        \"en\",\r\n        \"ar\",\r\n        \"de\",\r\n        \"es\",\r\n        \"es-419\",\r\n        \"fr\",\r\n        \"it\",\r\n        \"ja\",\r\n        \"ko\",\r\n        \"pl\",\r\n        \"pt-BR\",\r\n        \"ru\",\r\n        \"tr\",\r\n        \"zh-CN\",\r\n        \"zh-Hant\"\r\n    ];\r\n    return supportedLanguages.includes(lang);\r\n}\r\n\r\nmodule.exports = {\r\n    supportsLanguage\r\n};\r\n", "const fetch = require(\"node-fetch\");\r\nconst { supportsLanguage } = require(\"./util\");\r\n\r\n/**\r\n * Implements shared functions used by API versions\r\n */\r\nclass BaseClient {\r\n    /**\r\n     * constructor()\r\n     *\r\n     * @param {string} credentials\r\n     * @param {object} [config]\r\n     * @param {string} [config.defaultLanguage]\r\n     */\r\n    constructor(credentials, config = {}) {\r\n        if (!credentials) {\r\n            throw new Error(\"Invalid Credentials Supplied.\");\r\n        }\r\n\r\n        this.defaultLang = config.defaultLanguage || \"en\";\r\n        this.ignoreWarnings = Boolean(config.ignoreWarnings);\r\n        this.credentials = credentials;\r\n\r\n        if (!supportsLanguage(this.defaultLang)) {\r\n            throw new Error(\r\n            `Supplied default language ${this.defaultLang} is not supported`\r\n            );\r\n        }\r\n    }\r\n\r\n    /**\r\n     * request()\r\n     * Use node-fetch to query API\r\n     *\r\n     * @param {string} uri\r\n     * @param {object} [options]\r\n     * @param {string} [options.method]\r\n     * @returns {Promise<object>}\r\n     */\r\n    async request(uri, options = { method: \"GET\" }) {\r\n        // In test mode, return the URI we are about to fetch\r\n        if (process.env.testMode) {\r\n            return uri;\r\n        }\r\n        const response = await fetch(uri, {\r\n            method: options.method,\r\n            headers: {\r\n                Authorization: `${this.credentials}`,\r\n            },\r\n        });\r\n\r\n        const data = await response.json();\r\n        return data;\r\n    }\r\n\r\n    /**\r\n     * Prints a warning when using deprecated endpoints\r\n     * @param {string} oldMethod\r\n     * @param {string} newMethod\r\n     */\r\n    deprecationWarning(oldMethod, newMethod) {\r\n        if (this.ignoreWarnings) return;\r\n        console.warn(`WARNING: ${oldMethod} has been deprecated - please use ${newMethod}`)\r\n    }\r\n}\r\n\r\nmodule.exports = BaseClient;", "/**\r\n * fortnite-api-io\r\n * Module to make API calls to fortniteapi.io\r\n *\r\n * @author Ben Hawley\r\n * @license MIT\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * endpoints-v2.js\r\n * Exports and builds fortniteapi.io V2 API endpoints\r\n */\r\n\r\nconst endpoint = \"https://fortniteapi.io/v2\";\r\n\r\nmodule.exports = {\r\n    listChallenges: (season, lang) => `${endpoint}/challenges?season=${season}&lang=${lang}`,\r\n    listItems: lang => `${endpoint}/items/list?lang=${lang}`,\r\n    listUpcomingItems: lang => `${endpoint}/items/upcoming?lang=${lang}`,\r\n    getItemDetails: (id, lang) => `${endpoint}/items/get?id=${id}&lang=${lang}`,\r\n    getDailyShop: lang => `${endpoint}/shop?lang=${lang}`,\r\n    getBattlePassRewards: (season, lang) => `${endpoint}/battlepass?lang=${lang}&season=${season}`,\r\n    listItemLocations: () => `${endpoint}/maps/items/list`,\r\n    listCurrentPOI: lang => `${endpoint}/game/poi?lang=${lang}`\r\n};\r\n", "/**\r\n * fortnite-api-io\r\n * Module to make API calls to fortniteapi.io\r\n *\r\n * @author Ben Hawley\r\n * @license MIT\r\n */\r\n\r\n \"use strict\";\r\n\r\n/**\r\n * fortnite-api-v2.js\r\n * Class to make requests to API version 2 endpoints\r\n */\r\n\r\nconst BaseClient = require('./base-client');\r\nconst endpoints = require(\"./endpoints-v2\");\r\n\r\n/**\r\n * API Wrapper containing the V2 endpoints\r\n */\r\nclass FortniteAPIv2 extends BaseClient {\r\n\r\n    /**\r\n     * listItems()\r\n     * List all cosmetic items: skins, backpacks, emotes, pickaxes, sprays, etc.\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    listItems(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listItems(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listChallenges()\r\n     * List all challenges as well as rewards (xp, stars, cosmetics).\r\n     * Weekly challenges/missions are available for each season under .weekly\r\n     * Limited time missions are available under .limited_time\r\n     *\r\n     * @param {string} [season=current]\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    listChallenges(season = \"current\", options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listChallenges(season, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listUpcomingItems()\r\n     * List upcoming cosmetic items: skins, backpacks, emotes, pickaxes.\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    listUpcomingItems(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listUpcomingItems(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getItemDetails()\r\n     * Get all available details about an item.\r\n     * The ID can be found from the full list of items.\r\n     *\r\n     * @param {string} itemId\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    getItemDetails(itemId, options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getItemDetails(itemId, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getDailyShop()\r\n     * List all items currently in the shop\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    getDailyShop(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getDailyShop(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getBattlepassRewards()\r\n     * Get the list of rewards given in the Battle Pass for each season\r\n     *\r\n     * @param {string} [season=current]\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getBattlepassRewards(season = \"current\", options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getBattlePassRewards(season, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listCurrentPOI()\r\n     * Get the current games points of interest\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    listCurrentPOI(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listCurrentPOI(lang);\r\n        return this.request(uri);\r\n    }\r\n}\r\n\r\nmodule.exports = FortniteAPIv2;\r\n", "/**\r\n * fortnite-api-io\r\n * Module to make API calls to fortniteapi.io\r\n *\r\n * @author Ben Hawley\r\n * @author ThÃ©o Bontemps (maintainer)\r\n * @license MIT\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * endpoints.js\r\n * Exports and builds fortniteapi.io API endpoints\r\n */\r\n\r\nconst endpoint = \"https://fortniteapi.io/v1\";\r\nmodule.exports = {\r\n    listChallenges: (season, lang) => `${endpoint}/challenges?season=${season}&lang=${lang}`,\r\n    listItems: lang => `${endpoint}/items/list?lang=${lang}`,\r\n    listUpcomingItems: lang => `${endpoint}/items/upcoming?lang=${lang}`,\r\n    getItemDetails: (id, lang) => `${endpoint}/items/get?id=${id}&lang=${lang}`,\r\n    getDailyShop: lang => `${endpoint}/shop?lang=${lang}`,\r\n    getShopVotingOptions: _ => `${endpoint}/shop/voting`,\r\n    searchAccountId: (username, platform, strict = true) => {\r\n        let uri = `${endpoint}/lookup?username=${username}`;\r\n        if (platform) {\r\n            uri += `&platform=${platform}`;\r\n        }\r\n        if (strict === false) {\r\n            uri += `&strict=false`;\r\n        }\r\n        return uri;\r\n    },\r\n    getGlobalPlayerStats: account => `${endpoint}/stats?account=${account}`,\r\n    getPlayerRecentMatches: account => `${endpoint}/matches?account=${account}`,\r\n    getNews: (mode, lang) => `${endpoint}/news?lang=${lang}&type=${mode}`,\r\n    getBattlePassRewards: (season, lang) => `${endpoint}/battlepass?lang=${lang}&season=${season}`,\r\n    getAchievements: lang => `${endpoint}/achievements?lang=${lang}`,\r\n    getTournaments: lang => `${endpoint}/events/list?lang=${lang}`,\r\n    getTournamentSessionDetails: (windowId, page) => `${endpoint}/events/window?windowId=${windowId}&page=${page}`,\r\n    getTournamentScores: eventId => `${endpoint}/events/cumulative?eventId=${eventId}`,\r\n    listWeapons: _ => `${endpoint}/weapons/list`,\r\n    listPreviousMaps: _ => `${endpoint}/maps/list`,\r\n    listPreviousSeasons: _ => `${endpoint}/seasons/list`,\r\n    listCurrentPOI: lang => `${endpoint}/game/poi?lang=${lang}`,\r\n    getStatus: _ => `${endpoint}/status`,\r\n    listCurrentGameModes: lang => `${endpoint}/game/modes?lang=${lang}`,\r\n    listUsersById: (ids = []) => `${endpoint}/lookupUsername?id=${ids.join()}`,\r\n    getBundles: lang => `${endpoint}/bundles?lang=${lang}`,\r\n    listLoot: lang => `${endpoint}/loot/list?lang=${lang}`,\r\n    getLootDetails: (id, lang) => `${endpoint}/loot/get?id=${id}&lang=${lang}`,\r\n    listSets: lang => `${endpoint}/items/sets?lang=${lang}`,\r\n    getReplayDownloadLink: id => `${endpoint}/events/replay?session=${id}`,\r\n    getWeaponDetails: (id, lang) => `${endpoint}/loot/get?id=${id}&lang=${lang}`,\r\n    listWeaponSpawnChances: mode => `${endpoint}/loot/chances?mode=${mode}`,\r\n    getGameModeExtendedData: mode => `${endpoint}/game/modes/data?playlist=${mode}`,\r\n    listFeaturedCreativeIslands: _ => `${endpoint}/creative/featured`,\r\n    searchIsland: code => `${endpoint}/creative/island?code=${code}`,\r\n    listFish: lang => `${endpoint}/loot/fish?lang=${lang}`,\r\n    getPlayerFishStats: id => `${endpoint}/stats/fish?accountId=${id}`,\r\n    getMapsItems: _ => `${endpoint}/maps/items/list`,\r\n    getGameRadios: lang => `${endpoint}/game/radios?lang=${lang}`,\r\n    getRarities: _ => `${endpoint}/rarities`\r\n};\r\n", "/**\r\n * fortnite-api-io\r\n * Module to make API calls to fortniteapi.io\r\n *\r\n * @author Ben Hawley\r\n * @author ThÃ©o Bontemps (maintainer)\r\n * @license MIT\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * fortnite-api.js\r\n * Class to make requests to API\r\n */\r\n\r\n// Internal Libaries\r\nconst BaseClient = require('./base-client');\r\nconst FortniteAPIv2 = require('./fortnite-api-v2');\r\nconst endpoints = require(\"./endpoints\");\r\n\r\n/**\r\n * Fortnite API Class\r\n */\r\nclass FortniteAPI extends BaseClient {\r\n\r\n    /**\r\n     * constructor()\r\n     *\r\n     * @param {string} credentials\r\n     * @param {object} [config]\r\n     * @param {string} [config.defaultLanguage]\r\n     * @param {string} [config.ignoreWarnings]\r\n     */\r\n    constructor(credentials, config = {}) {\r\n        super(credentials, config)\r\n\r\n        // Attach the V2 API currently in development\r\n        this.v2 = new FortniteAPIv2(credentials, config);\r\n    }\r\n\r\n    /**\r\n     * listItems()\r\n     * List all cosmetic items: skins, backpacks, emotes, pickaxes, sprays, etc.\r\n     *\r\n     * @deprecated\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    listItems(options = {}) {\r\n        this.deprecationWarning('listItems', 'FortniteAPI.v2.listItems');\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listItems(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listChallenges()\r\n     * List all challenges as well as rewards (xp, stars, cosmetics).\r\n     * Weekly challenges/missions are available for each season under .weekly\r\n     * Limited time missions are available under .limited_time\r\n     *\r\n     * @deprecated\r\n     * @param {string} [season=current]\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    listChallenges(season = \"current\", options = {}) {\r\n        this.deprecationWarning('listChallenges', 'FortniteAPI.v2.listChallenges')\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listChallenges(season, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listUpcomingItems()\r\n     * List upcoming cosmetic items: skins, backpacks, emotes, pickaxes.\r\n     *\r\n     * @deprecated\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    listUpcomingItems(options = {}) {\r\n        this.deprecationWarning('listUpcomingItems', 'FortniteAPI.v2.listUpcomingItems')\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listUpcomingItems(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getItemDetails()\r\n     * Get all available details about an item.\r\n     * The ID can be found from the full list of items.\r\n     *\r\n     * @deprecated\r\n     * @param {string} itemId\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    getItemDetails(itemId, options = {}) {\r\n        this.deprecationWarning('getItemDetails', 'FortniteAPI.v2.getItemDetails')\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getItemDetails(itemId, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getDailyShop()\r\n     * List all items currently in the shop\r\n     *\r\n     * @deprecated\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant\r\n     * @returns {Promise<object>}\r\n     */\r\n    getDailyShop(options = {}) {\r\n        this.deprecationWarning('getDailyShop', 'FortniteAPI.v2.getDailyShop')\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getDailyShop(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getShopVotingOptions()\r\n     * Get options to vote for the next community shop item\r\n     * @returns {Promise<object>}\r\n     */\r\n    getShopVotingOptions() {\r\n        const uri = endpoints.getShopVotingOptions();\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * searchAccountId()\r\n     * Search an account ID using a player name\r\n     *\r\n     * @deprecated since v1.3.0 please use getUserById\r\n     * @param {string} username\r\n     * @param {object} [options]\r\n     * @param {boolean} [options.strict=true] When false will return other results for similar names\r\n     * @param {string} [options.platform=\"\"] Search for accounts not linked to an epic account: xbl or psn\r\n     * @returns {Promise<object>}\r\n     */\r\n    searchAccountId(username, options = { strict: true, platform: \"\" }) {\r\n        const uri = endpoints.searchAccountId(\r\n            username,\r\n            options.platform,\r\n            options.strict\r\n        );\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getGlobalPlayerStats()\r\n     * Get player stats, with a breakdown per platform used (mouse & keyboard, gamepad, touch)\r\n     *\r\n     * @param {string} accountId\r\n     * @returns {Promise<object>}\r\n     */\r\n    getGlobalPlayerStats(accountId) {\r\n        const uri = endpoints.getGlobalPlayerStats(accountId);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getPlayerRecentMatches()\r\n     * List the last 25 games for a player. Some games can be grouped.\r\n     * If it's the first time you search this user, the matches list will be empty.\r\n     *\r\n     * @param {string} accountId\r\n     * @returns {Promise<object>}\r\n     */\r\n    getPlayerRecentMatches(accountId) {\r\n        const uri = endpoints.getPlayerRecentMatches(accountId);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getNews()\r\n     * Lists the current news in Fortnite Battle Royale or Save The World\r\n     *\r\n     * @param {string} [mode=br] game mode \"br\" or \"stw\"\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getNews(mode = \"br\", options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getNews(mode, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getBattlepassRewards()\r\n     * Get the list of rewards given in the Battle Pass for each season\r\n     *\r\n     * @deprecated\r\n     * @param {string} [season=current]\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getBattlepassRewards(season = \"current\", options = {}) {\r\n        this.deprecationWarning('getBattlepassRewards', 'FortniteAPI.v2.getBattlepassRewards')\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getBattlePassRewards(season, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getAchievements()\r\n     * Get the list of achievements\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getAchievements(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getAchievements(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getTournaments\r\n     * Get the list of tournaments\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getTournaments(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getTournaments(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getTournamentSessionDetails()\r\n     * Get a tournament session details: rules, payout, results\r\n     *\r\n     * @param {string} windowId\r\n     * @param {Integer} [page=0]\r\n     * @returns {Promise<object>}\r\n     */\r\n    getTournamentSessionDetails(windowId, page = 0) {\r\n        const uri = endpoints.getTournamentSessionDetails(windowId, page);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getTournamentScores()\r\n     * Get the cumulative scoring for a tournament event\r\n     *\r\n     * @param {string} eventId the tournament event id\r\n     * @returns {Promise<object>}\r\n     */\r\n    getTournamentScores(eventId) {\r\n        const uri = endpoints.getTournamentScores(eventId);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listPreviousMaps()\r\n     * Get the list of links to the different maps\r\n     *\r\n     * @returns {Promise<object>}\r\n     */\r\n    listPreviousMaps() {\r\n        const uri = endpoints.listPreviousMaps();\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listPreviousSeasons()\r\n     * List all the season dates and patch versions associated.\r\n     *\r\n     * @returns {Promise<object>}\r\n     */\r\n    listPreviousSeasons() {\r\n        const uri = endpoints.listPreviousSeasons();\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listCurrentPOI()\r\n     * Get the current games points of interest\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    listCurrentPOI(options = {}) {\r\n        this.deprecationWarning('listCurrentPOI', 'FortniteAPI.v2.listCurrentPOI');\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listCurrentPOI(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getStatus()\r\n     * Get the Fortnite server status\r\n     *\r\n     * @returns {Promise<object>}\r\n     */\r\n    getStatus() {\r\n        const uri = endpoints.getStatus();\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listCurrentGameModes()\r\n     * List the current game modes\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    listCurrentGameModes(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listCurrentGameModes(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getAccountIdByUsername()\r\n     * Get an account ID using a player name\r\n     *\r\n     * @param {string} username\r\n     * @param {object} [options]\r\n     * @param {boolean} [options.strict=true] When false will return other results for similar names\r\n     * @param {string} [options.platform=\"\"] Search for accounts not linked to an epic account: xbl or psn\r\n     * @returns {Promise<object>}\r\n     */\r\n    getAccountIdByUsername(username, options = { strict: true, platform: \"\" }) {\r\n        const uri = endpoints.searchAccountId(\r\n            username,\r\n            options.platform,\r\n            options.strict\r\n        );\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getUserById()\r\n     * Get a user account name by their Fortnite ID\r\n     *\r\n     * @param {string} id\r\n     * @returns {Promise<object>}\r\n     */\r\n    getUserById(id) {\r\n        const uri = endpoints.listUsersById([id]);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listUsersById()\r\n     * List user accounts by a list of ids\r\n     *\r\n     * @param {Array<string>} [ids=[]]\r\n     * @returns {Promise<object>}\r\n     */\r\n    listUsersById(ids = []) {\r\n        const uri = endpoints.listUsersById(ids);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getBundles()\r\n     * List recent bundles\r\n     *\r\n     * @premium\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, de, es, fr, it, ja\r\n     * @returns {Promise<object>}\r\n     */\r\n    getBundles(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getBundles(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listLoot()\r\n     * List all loot/weapons in the game with their basic stats\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    listLoot(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listLoot(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getLootDetails()\r\n     * Get all stats for a specific loot/weapon item\r\n     *\r\n     * @premium\r\n     * @param {string} id of loot item\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getLootDetails(id, options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getLootDetails(id, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listSets()\r\n     * List all the sets used by cosmetics.\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    listSets(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listSets(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getReplayDownloadLink()\r\n     * Get creative map informations\r\n     *\r\n     * @premium\r\n     * @param {string} id of session\r\n     * @returns {Promise<object>}\r\n     */\r\n    getReplayDownloadLink(id) {\r\n        const uri = endpoints.getReplayDownloadLink(id);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getWeaponDetails()\r\n     * Get all stats for a specific loot/weapon item\r\n     *\r\n     * @premium\r\n     * @param {string} id of weapon\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr\r\n     * @returns {Promise<object>}\r\n     */\r\n    getWeaponDetails(id, options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getWeaponDetails(id, lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listWeaponsSpawnChance()\r\n     * List the spawn chances for each type for a given game mode.\r\n     *\r\n     * @premium\r\n     * @param {string} mode\r\n     * @returns {Promise<object>}\r\n     */\r\n    listWeaponSpawnChances(mode) {\r\n        const uri = endpoints.listWeaponSpawnChances(mode);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getGameModeExtendedData()\r\n     * A lot of different values, ranging from spawn % for rare chests, to number of llamas per game.\r\n     *\r\n     * @premium\r\n     * @param {string} mode\r\n     * @returns {Promise<object>}\r\n     */\r\n    getGameModeExtendedData(mode) {\r\n        const uri = endpoints.getGameModeExtendedData(mode);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listFeaturedCreativeIslands()\r\n     * List the current featured islands in creative mode\r\n     *\r\n     * @returns {Promise<object>}\r\n     */\r\n    listFeaturedCreativeIslands() {\r\n        const uri = endpoints.listFeaturedCreativeIslands();\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * searchIsland()\r\n     * Get all details related to a creative island\r\n     *\r\n     * @param {string} code of map\r\n     * @returns {Promise<object>}\r\n     */\r\n    searchIsland(code) {\r\n        const uri = endpoints.searchIsland(code);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * listFish()\r\n     * Get the list of fish (name, description, image) as well as their minimum and maximum length\r\n     *\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] unknown supported languages\r\n     * @returns {Promise<object>}\r\n     */\r\n    listFish(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.listFish(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getPlayerFishStats()\r\n     * Get the stats for a specific player: each fish caught is returned with the best length for that player\r\n     *\r\n     * @param {string} accountId\r\n     * @returns {Promise<object>}\r\n     */\r\n    getPlayerFishStats(accountId) {\r\n        const uri = endpoints.getPlayerFishStats(accountId);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getMapsItems()\r\n     * Get items positions [NOT STABLE]\r\n     *\r\n     * @returns {Promise<object>}\r\n     */\r\n    getMapsItems() {\r\n        const uri = endpoints.getMapsItems();\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getGameRadios()\r\n     * List the game radios as well as the audio files\r\n     * Note: not all radios are available in all languages\r\n     *\r\n     * @premium\r\n     * @param {object} [options]\r\n     * @param {string} [options.lang] unknown supported languages\r\n     * @returns {Promise<object>}\r\n     */\r\n    getGameRadios(options = {}) {\r\n        const lang = options.lang || this.defaultLang;\r\n        const uri = endpoints.getGameRadios(lang);\r\n        return this.request(uri);\r\n    }\r\n\r\n    /**\r\n     * getRarities()\r\n     * Lists rarities and their associated colors\r\n     *\r\n     * @returns {Promise<object>}\r\n     */\r\n    getRarities() {\r\n        const uri = endpoints.getRarities();\r\n        return this.request(uri);\r\n    }\r\n}\r\n\r\nmodule.exports = FortniteAPI;\r\n", "/**\r\n * fortnite-api-io\r\n * Module to make API calls to fortniteapi.io\r\n *\r\n * @author Ben Hawley\r\n * @license MIT\r\n */\r\n\r\n\"use strict\";\r\n\r\n/**\r\n * index.js\r\n * Export the API Class\r\n */\r\nconst FortniteAPI = require(\"./lib/fortnite-api\");\r\nmodule.exports = FortniteAPI;\r\n"],
  "mappings": "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",
  "names": []
}
