var __getOwnPropNames = Object.getOwnPropertyNames;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};

// node_modules/node-fetch/browser.js
var require_browser = __commonJS({
  "node_modules/node-fetch/browser.js"(exports, module) {
    "use strict";
    var getGlobal = function() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    };
    var globalObject = getGlobal();
    module.exports = exports = globalObject.fetch;
    if (globalObject.fetch) {
      exports.default = globalObject.fetch.bind(globalObject);
    }
    exports.Headers = globalObject.Headers;
    exports.Request = globalObject.Request;
    exports.Response = globalObject.Response;
  }
});

// node_modules/fortnite-api-io/lib/util.js
var require_util = __commonJS({
  "node_modules/fortnite-api-io/lib/util.js"(exports, module) {
    "use strict";
    function supportsLanguage(lang) {
      const supportedLanguages = [
        "en",
        "ar",
        "de",
        "es",
        "es-419",
        "fr",
        "it",
        "ja",
        "ko",
        "pl",
        "pt-BR",
        "ru",
        "tr",
        "zh-CN",
        "zh-Hant"
      ];
      return supportedLanguages.includes(lang);
    }
    module.exports = {
      supportsLanguage
    };
  }
});

// node_modules/fortnite-api-io/lib/base-client.js
var require_base_client = __commonJS({
  "node_modules/fortnite-api-io/lib/base-client.js"(exports, module) {
    var fetch = require_browser();
    var { supportsLanguage } = require_util();
    var BaseClient = class {
      /**
       * constructor()
       *
       * @param {string} credentials
       * @param {object} [config]
       * @param {string} [config.defaultLanguage]
       */
      constructor(credentials, config = {}) {
        if (!credentials) {
          throw new Error("Invalid Credentials Supplied.");
        }
        this.defaultLang = config.defaultLanguage || "en";
        this.ignoreWarnings = Boolean(config.ignoreWarnings);
        this.credentials = credentials;
        if (!supportsLanguage(this.defaultLang)) {
          throw new Error(
            `Supplied default language ${this.defaultLang} is not supported`
          );
        }
      }
      /**
       * request()
       * Use node-fetch to query API
       *
       * @param {string} uri
       * @param {object} [options]
       * @param {string} [options.method]
       * @returns {Promise<object>}
       */
      async request(uri, options = { method: "GET" }) {
        if (process.env.testMode) {
          return uri;
        }
        const response = await fetch(uri, {
          method: options.method,
          headers: {
            Authorization: `${this.credentials}`
          }
        });
        const data = await response.json();
        return data;
      }
      /**
       * Prints a warning when using deprecated endpoints
       * @param {string} oldMethod
       * @param {string} newMethod
       */
      deprecationWarning(oldMethod, newMethod) {
        if (this.ignoreWarnings) return;
        console.warn(`WARNING: ${oldMethod} has been deprecated - please use ${newMethod}`);
      }
    };
    module.exports = BaseClient;
  }
});

// node_modules/fortnite-api-io/lib/endpoints-v2.js
var require_endpoints_v2 = __commonJS({
  "node_modules/fortnite-api-io/lib/endpoints-v2.js"(exports, module) {
    "use strict";
    var endpoint = "https://fortniteapi.io/v2";
    module.exports = {
      listChallenges: (season, lang) => `${endpoint}/challenges?season=${season}&lang=${lang}`,
      listItems: (lang) => `${endpoint}/items/list?lang=${lang}`,
      listUpcomingItems: (lang) => `${endpoint}/items/upcoming?lang=${lang}`,
      getItemDetails: (id, lang) => `${endpoint}/items/get?id=${id}&lang=${lang}`,
      getDailyShop: (lang) => `${endpoint}/shop?lang=${lang}`,
      getBattlePassRewards: (season, lang) => `${endpoint}/battlepass?lang=${lang}&season=${season}`,
      listItemLocations: () => `${endpoint}/maps/items/list`,
      listCurrentPOI: (lang) => `${endpoint}/game/poi?lang=${lang}`
    };
  }
});

// node_modules/fortnite-api-io/lib/fortnite-api-v2.js
var require_fortnite_api_v2 = __commonJS({
  "node_modules/fortnite-api-io/lib/fortnite-api-v2.js"(exports, module) {
    "use strict";
    var BaseClient = require_base_client();
    var endpoints = require_endpoints_v2();
    var FortniteAPIv2 = class extends BaseClient {
      /**
       * listItems()
       * List all cosmetic items: skins, backpacks, emotes, pickaxes, sprays, etc.
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      listItems(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listItems(lang);
        return this.request(uri);
      }
      /**
       * listChallenges()
       * List all challenges as well as rewards (xp, stars, cosmetics).
       * Weekly challenges/missions are available for each season under .weekly
       * Limited time missions are available under .limited_time
       *
       * @param {string} [season=current]
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      listChallenges(season = "current", options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listChallenges(season, lang);
        return this.request(uri);
      }
      /**
       * listUpcomingItems()
       * List upcoming cosmetic items: skins, backpacks, emotes, pickaxes.
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      listUpcomingItems(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listUpcomingItems(lang);
        return this.request(uri);
      }
      /**
       * getItemDetails()
       * Get all available details about an item.
       * The ID can be found from the full list of items.
       *
       * @param {string} itemId
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      getItemDetails(itemId, options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getItemDetails(itemId, lang);
        return this.request(uri);
      }
      /**
       * getDailyShop()
       * List all items currently in the shop
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      getDailyShop(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getDailyShop(lang);
        return this.request(uri);
      }
      /**
       * getBattlepassRewards()
       * Get the list of rewards given in the Battle Pass for each season
       *
       * @param {string} [season=current]
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getBattlepassRewards(season = "current", options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getBattlePassRewards(season, lang);
        return this.request(uri);
      }
      /**
       * listCurrentPOI()
       * Get the current games points of interest
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      listCurrentPOI(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listCurrentPOI(lang);
        return this.request(uri);
      }
    };
    module.exports = FortniteAPIv2;
  }
});

// node_modules/fortnite-api-io/lib/endpoints.js
var require_endpoints = __commonJS({
  "node_modules/fortnite-api-io/lib/endpoints.js"(exports, module) {
    "use strict";
    var endpoint = "https://fortniteapi.io/v1";
    module.exports = {
      listChallenges: (season, lang) => `${endpoint}/challenges?season=${season}&lang=${lang}`,
      listItems: (lang) => `${endpoint}/items/list?lang=${lang}`,
      listUpcomingItems: (lang) => `${endpoint}/items/upcoming?lang=${lang}`,
      getItemDetails: (id, lang) => `${endpoint}/items/get?id=${id}&lang=${lang}`,
      getDailyShop: (lang) => `${endpoint}/shop?lang=${lang}`,
      getShopVotingOptions: (_) => `${endpoint}/shop/voting`,
      searchAccountId: (username, platform, strict = true) => {
        let uri = `${endpoint}/lookup?username=${username}`;
        if (platform) {
          uri += `&platform=${platform}`;
        }
        if (strict === false) {
          uri += `&strict=false`;
        }
        return uri;
      },
      getGlobalPlayerStats: (account) => `${endpoint}/stats?account=${account}`,
      getPlayerRecentMatches: (account) => `${endpoint}/matches?account=${account}`,
      getNews: (mode, lang) => `${endpoint}/news?lang=${lang}&type=${mode}`,
      getBattlePassRewards: (season, lang) => `${endpoint}/battlepass?lang=${lang}&season=${season}`,
      getAchievements: (lang) => `${endpoint}/achievements?lang=${lang}`,
      getTournaments: (lang) => `${endpoint}/events/list?lang=${lang}`,
      getTournamentSessionDetails: (windowId, page) => `${endpoint}/events/window?windowId=${windowId}&page=${page}`,
      getTournamentScores: (eventId) => `${endpoint}/events/cumulative?eventId=${eventId}`,
      listWeapons: (_) => `${endpoint}/weapons/list`,
      listPreviousMaps: (_) => `${endpoint}/maps/list`,
      listPreviousSeasons: (_) => `${endpoint}/seasons/list`,
      listCurrentPOI: (lang) => `${endpoint}/game/poi?lang=${lang}`,
      getStatus: (_) => `${endpoint}/status`,
      listCurrentGameModes: (lang) => `${endpoint}/game/modes?lang=${lang}`,
      listUsersById: (ids = []) => `${endpoint}/lookupUsername?id=${ids.join()}`,
      getBundles: (lang) => `${endpoint}/bundles?lang=${lang}`,
      listLoot: (lang) => `${endpoint}/loot/list?lang=${lang}`,
      getLootDetails: (id, lang) => `${endpoint}/loot/get?id=${id}&lang=${lang}`,
      listSets: (lang) => `${endpoint}/items/sets?lang=${lang}`,
      getReplayDownloadLink: (id) => `${endpoint}/events/replay?session=${id}`,
      getWeaponDetails: (id, lang) => `${endpoint}/loot/get?id=${id}&lang=${lang}`,
      listWeaponSpawnChances: (mode) => `${endpoint}/loot/chances?mode=${mode}`,
      getGameModeExtendedData: (mode) => `${endpoint}/game/modes/data?playlist=${mode}`,
      listFeaturedCreativeIslands: (_) => `${endpoint}/creative/featured`,
      searchIsland: (code) => `${endpoint}/creative/island?code=${code}`,
      listFish: (lang) => `${endpoint}/loot/fish?lang=${lang}`,
      getPlayerFishStats: (id) => `${endpoint}/stats/fish?accountId=${id}`,
      getMapsItems: (_) => `${endpoint}/maps/items/list`,
      getGameRadios: (lang) => `${endpoint}/game/radios?lang=${lang}`,
      getRarities: (_) => `${endpoint}/rarities`
    };
  }
});

// node_modules/fortnite-api-io/lib/fortnite-api.js
var require_fortnite_api = __commonJS({
  "node_modules/fortnite-api-io/lib/fortnite-api.js"(exports, module) {
    "use strict";
    var BaseClient = require_base_client();
    var FortniteAPIv2 = require_fortnite_api_v2();
    var endpoints = require_endpoints();
    var FortniteAPI = class extends BaseClient {
      /**
       * constructor()
       *
       * @param {string} credentials
       * @param {object} [config]
       * @param {string} [config.defaultLanguage]
       * @param {string} [config.ignoreWarnings]
       */
      constructor(credentials, config = {}) {
        super(credentials, config);
        this.v2 = new FortniteAPIv2(credentials, config);
      }
      /**
       * listItems()
       * List all cosmetic items: skins, backpacks, emotes, pickaxes, sprays, etc.
       *
       * @deprecated
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      listItems(options = {}) {
        this.deprecationWarning("listItems", "FortniteAPI.v2.listItems");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listItems(lang);
        return this.request(uri);
      }
      /**
       * listChallenges()
       * List all challenges as well as rewards (xp, stars, cosmetics).
       * Weekly challenges/missions are available for each season under .weekly
       * Limited time missions are available under .limited_time
       *
       * @deprecated
       * @param {string} [season=current]
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      listChallenges(season = "current", options = {}) {
        this.deprecationWarning("listChallenges", "FortniteAPI.v2.listChallenges");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listChallenges(season, lang);
        return this.request(uri);
      }
      /**
       * listUpcomingItems()
       * List upcoming cosmetic items: skins, backpacks, emotes, pickaxes.
       *
       * @deprecated
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      listUpcomingItems(options = {}) {
        this.deprecationWarning("listUpcomingItems", "FortniteAPI.v2.listUpcomingItems");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listUpcomingItems(lang);
        return this.request(uri);
      }
      /**
       * getItemDetails()
       * Get all available details about an item.
       * The ID can be found from the full list of items.
       *
       * @deprecated
       * @param {string} itemId
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      getItemDetails(itemId, options = {}) {
        this.deprecationWarning("getItemDetails", "FortniteAPI.v2.getItemDetails");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getItemDetails(itemId, lang);
        return this.request(uri);
      }
      /**
       * getDailyShop()
       * List all items currently in the shop
       *
       * @deprecated
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr, zh-CN, zh-Hant
       * @returns {Promise<object>}
       */
      getDailyShop(options = {}) {
        this.deprecationWarning("getDailyShop", "FortniteAPI.v2.getDailyShop");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getDailyShop(lang);
        return this.request(uri);
      }
      /**
       * getShopVotingOptions()
       * Get options to vote for the next community shop item
       * @returns {Promise<object>}
       */
      getShopVotingOptions() {
        const uri = endpoints.getShopVotingOptions();
        return this.request(uri);
      }
      /**
       * searchAccountId()
       * Search an account ID using a player name
       *
       * @deprecated since v1.3.0 please use getUserById
       * @param {string} username
       * @param {object} [options]
       * @param {boolean} [options.strict=true] When false will return other results for similar names
       * @param {string} [options.platform=""] Search for accounts not linked to an epic account: xbl or psn
       * @returns {Promise<object>}
       */
      searchAccountId(username, options = { strict: true, platform: "" }) {
        const uri = endpoints.searchAccountId(
          username,
          options.platform,
          options.strict
        );
        return this.request(uri);
      }
      /**
       * getGlobalPlayerStats()
       * Get player stats, with a breakdown per platform used (mouse & keyboard, gamepad, touch)
       *
       * @param {string} accountId
       * @returns {Promise<object>}
       */
      getGlobalPlayerStats(accountId) {
        const uri = endpoints.getGlobalPlayerStats(accountId);
        return this.request(uri);
      }
      /**
       * getPlayerRecentMatches()
       * List the last 25 games for a player. Some games can be grouped.
       * If it's the first time you search this user, the matches list will be empty.
       *
       * @param {string} accountId
       * @returns {Promise<object>}
       */
      getPlayerRecentMatches(accountId) {
        const uri = endpoints.getPlayerRecentMatches(accountId);
        return this.request(uri);
      }
      /**
       * getNews()
       * Lists the current news in Fortnite Battle Royale or Save The World
       *
       * @param {string} [mode=br] game mode "br" or "stw"
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getNews(mode = "br", options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getNews(mode, lang);
        return this.request(uri);
      }
      /**
       * getBattlepassRewards()
       * Get the list of rewards given in the Battle Pass for each season
       *
       * @deprecated
       * @param {string} [season=current]
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getBattlepassRewards(season = "current", options = {}) {
        this.deprecationWarning("getBattlepassRewards", "FortniteAPI.v2.getBattlepassRewards");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getBattlePassRewards(season, lang);
        return this.request(uri);
      }
      /**
       * getAchievements()
       * Get the list of achievements
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getAchievements(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getAchievements(lang);
        return this.request(uri);
      }
      /**
       * getTournaments
       * Get the list of tournaments
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getTournaments(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getTournaments(lang);
        return this.request(uri);
      }
      /**
       * getTournamentSessionDetails()
       * Get a tournament session details: rules, payout, results
       *
       * @param {string} windowId
       * @param {Integer} [page=0]
       * @returns {Promise<object>}
       */
      getTournamentSessionDetails(windowId, page = 0) {
        const uri = endpoints.getTournamentSessionDetails(windowId, page);
        return this.request(uri);
      }
      /**
       * getTournamentScores()
       * Get the cumulative scoring for a tournament event
       *
       * @param {string} eventId the tournament event id
       * @returns {Promise<object>}
       */
      getTournamentScores(eventId) {
        const uri = endpoints.getTournamentScores(eventId);
        return this.request(uri);
      }
      /**
       * listPreviousMaps()
       * Get the list of links to the different maps
       *
       * @returns {Promise<object>}
       */
      listPreviousMaps() {
        const uri = endpoints.listPreviousMaps();
        return this.request(uri);
      }
      /**
       * listPreviousSeasons()
       * List all the season dates and patch versions associated.
       *
       * @returns {Promise<object>}
       */
      listPreviousSeasons() {
        const uri = endpoints.listPreviousSeasons();
        return this.request(uri);
      }
      /**
       * listCurrentPOI()
       * Get the current games points of interest
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      listCurrentPOI(options = {}) {
        this.deprecationWarning("listCurrentPOI", "FortniteAPI.v2.listCurrentPOI");
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listCurrentPOI(lang);
        return this.request(uri);
      }
      /**
       * getStatus()
       * Get the Fortnite server status
       *
       * @returns {Promise<object>}
       */
      getStatus() {
        const uri = endpoints.getStatus();
        return this.request(uri);
      }
      /**
       * listCurrentGameModes()
       * List the current game modes
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      listCurrentGameModes(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listCurrentGameModes(lang);
        return this.request(uri);
      }
      /**
       * getAccountIdByUsername()
       * Get an account ID using a player name
       *
       * @param {string} username
       * @param {object} [options]
       * @param {boolean} [options.strict=true] When false will return other results for similar names
       * @param {string} [options.platform=""] Search for accounts not linked to an epic account: xbl or psn
       * @returns {Promise<object>}
       */
      getAccountIdByUsername(username, options = { strict: true, platform: "" }) {
        const uri = endpoints.searchAccountId(
          username,
          options.platform,
          options.strict
        );
        return this.request(uri);
      }
      /**
       * getUserById()
       * Get a user account name by their Fortnite ID
       *
       * @param {string} id
       * @returns {Promise<object>}
       */
      getUserById(id) {
        const uri = endpoints.listUsersById([id]);
        return this.request(uri);
      }
      /**
       * listUsersById()
       * List user accounts by a list of ids
       *
       * @param {Array<string>} [ids=[]]
       * @returns {Promise<object>}
       */
      listUsersById(ids = []) {
        const uri = endpoints.listUsersById(ids);
        return this.request(uri);
      }
      /**
       * getBundles()
       * List recent bundles
       *
       * @premium
       * @param {object} [options]
       * @param {string} [options.lang] en, de, es, fr, it, ja
       * @returns {Promise<object>}
       */
      getBundles(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getBundles(lang);
        return this.request(uri);
      }
      /**
       * listLoot()
       * List all loot/weapons in the game with their basic stats
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      listLoot(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listLoot(lang);
        return this.request(uri);
      }
      /**
       * getLootDetails()
       * Get all stats for a specific loot/weapon item
       *
       * @premium
       * @param {string} id of loot item
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getLootDetails(id, options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getLootDetails(id, lang);
        return this.request(uri);
      }
      /**
       * listSets()
       * List all the sets used by cosmetics.
       *
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      listSets(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listSets(lang);
        return this.request(uri);
      }
      /**
       * getReplayDownloadLink()
       * Get creative map informations
       *
       * @premium
       * @param {string} id of session
       * @returns {Promise<object>}
       */
      getReplayDownloadLink(id) {
        const uri = endpoints.getReplayDownloadLink(id);
        return this.request(uri);
      }
      /**
       * getWeaponDetails()
       * Get all stats for a specific loot/weapon item
       *
       * @premium
       * @param {string} id of weapon
       * @param {object} [options]
       * @param {string} [options.lang] en, ar, de, es, es-419, fr, it, ja, ko, pl, pt-BR, ru, tr
       * @returns {Promise<object>}
       */
      getWeaponDetails(id, options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getWeaponDetails(id, lang);
        return this.request(uri);
      }
      /**
       * listWeaponsSpawnChance()
       * List the spawn chances for each type for a given game mode.
       *
       * @premium
       * @param {string} mode
       * @returns {Promise<object>}
       */
      listWeaponSpawnChances(mode) {
        const uri = endpoints.listWeaponSpawnChances(mode);
        return this.request(uri);
      }
      /**
       * getGameModeExtendedData()
       * A lot of different values, ranging from spawn % for rare chests, to number of llamas per game.
       *
       * @premium
       * @param {string} mode
       * @returns {Promise<object>}
       */
      getGameModeExtendedData(mode) {
        const uri = endpoints.getGameModeExtendedData(mode);
        return this.request(uri);
      }
      /**
       * listFeaturedCreativeIslands()
       * List the current featured islands in creative mode
       *
       * @returns {Promise<object>}
       */
      listFeaturedCreativeIslands() {
        const uri = endpoints.listFeaturedCreativeIslands();
        return this.request(uri);
      }
      /**
       * searchIsland()
       * Get all details related to a creative island
       *
       * @param {string} code of map
       * @returns {Promise<object>}
       */
      searchIsland(code) {
        const uri = endpoints.searchIsland(code);
        return this.request(uri);
      }
      /**
       * listFish()
       * Get the list of fish (name, description, image) as well as their minimum and maximum length
       *
       * @param {object} [options]
       * @param {string} [options.lang] unknown supported languages
       * @returns {Promise<object>}
       */
      listFish(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.listFish(lang);
        return this.request(uri);
      }
      /**
       * getPlayerFishStats()
       * Get the stats for a specific player: each fish caught is returned with the best length for that player
       *
       * @param {string} accountId
       * @returns {Promise<object>}
       */
      getPlayerFishStats(accountId) {
        const uri = endpoints.getPlayerFishStats(accountId);
        return this.request(uri);
      }
      /**
       * getMapsItems()
       * Get items positions [NOT STABLE]
       *
       * @returns {Promise<object>}
       */
      getMapsItems() {
        const uri = endpoints.getMapsItems();
        return this.request(uri);
      }
      /**
       * getGameRadios()
       * List the game radios as well as the audio files
       * Note: not all radios are available in all languages
       *
       * @premium
       * @param {object} [options]
       * @param {string} [options.lang] unknown supported languages
       * @returns {Promise<object>}
       */
      getGameRadios(options = {}) {
        const lang = options.lang || this.defaultLang;
        const uri = endpoints.getGameRadios(lang);
        return this.request(uri);
      }
      /**
       * getRarities()
       * Lists rarities and their associated colors
       *
       * @returns {Promise<object>}
       */
      getRarities() {
        const uri = endpoints.getRarities();
        return this.request(uri);
      }
    };
    module.exports = FortniteAPI;
  }
});

// node_modules/fortnite-api-io/index.js
var require_fortnite_api_io = __commonJS({
  "node_modules/fortnite-api-io/index.js"(exports, module) {
    var FortniteAPI = require_fortnite_api();
    module.exports = FortniteAPI;
  }
});
export default require_fortnite_api_io();
/*! Bundled license information:

fortnite-api-io/lib/util.js:
  (**
   * fortnite-api-io
   * Module to make API calls to fortniteapi.io
   *
   * @author Ben Hawley
   * @license MIT
   *)

fortnite-api-io/lib/endpoints-v2.js:
  (**
   * fortnite-api-io
   * Module to make API calls to fortniteapi.io
   *
   * @author Ben Hawley
   * @license MIT
   *)

fortnite-api-io/lib/fortnite-api-v2.js:
  (**
   * fortnite-api-io
   * Module to make API calls to fortniteapi.io
   *
   * @author Ben Hawley
   * @license MIT
   *)

fortnite-api-io/lib/endpoints.js:
  (**
   * fortnite-api-io
   * Module to make API calls to fortniteapi.io
   *
   * @author Ben Hawley
   * @author Théo Bontemps (maintainer)
   * @license MIT
   *)

fortnite-api-io/lib/fortnite-api.js:
  (**
   * fortnite-api-io
   * Module to make API calls to fortniteapi.io
   *
   * @author Ben Hawley
   * @author Théo Bontemps (maintainer)
   * @license MIT
   *)

fortnite-api-io/index.js:
  (**
   * fortnite-api-io
   * Module to make API calls to fortniteapi.io
   *
   * @author Ben Hawley
   * @license MIT
   *)
*/
//# sourceMappingURL=fortnite-api-io.js.map
